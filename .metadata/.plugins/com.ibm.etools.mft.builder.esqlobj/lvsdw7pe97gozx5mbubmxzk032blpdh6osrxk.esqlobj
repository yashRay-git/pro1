CREATE COMPUTE MODULE flow_log_Compute1
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		-- CALL CopyMessageHeaders();
		 CALL CopyEntireMessage();
		RETURN TRUE;
	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;


	CREATE PROCEDURE CopyEntireMessage() BEGIN
		
		-- Declare references and variables
   DECLARE outref REFERENCE TO InputRoot.JSON.Data; -- Point to the JSON data field
   DECLARE mychar, mychar1 CHARACTER;
   DECLARE dateBlob BLOB;
   DECLARE dateBlob2 BLOB;
   

-- Convert JSON to BLOB
      SET dateBlob = ASBITSTREAM(outref);

-- Convert BLOB to character string
     SET mychar = CAST(dateBlob AS CHARACTER CCSID InputRoot.Properties.CodedCharSetId);

-- Use the converted date string in the message
    CALL mydata(ApplicationLabel, MessageFlowLabel, CURRENT_TIMESTAMP, mychar1, 'Host_response');

-- Copy the rest of the message from JSON
    SET OutputRoot.XMLNSC.OriginalData = OutputRoot.JSON.Data.orignalData;
		
		
		--SET OutputRoot.XMLNSC = InputRoot.JSON.Data;
		
		 DECLARE xvar2 REFERENCE TO InputRoot.XMLNSC;
		 
		  SET dateBlob2 = ASBITSTREAM(xvar2);
		  
		 SET mychar1 = CAST(dateBlob2 AS CHARACTER CCSID InputRoot.Properties.CodedCharSetId);
		 
    CALL mydata(ApplicationLabel, MessageFlowLabel, CURRENT_TIMESTAMP, mychar1, 'channel_response');
		 
		
	END;
END MODULE;