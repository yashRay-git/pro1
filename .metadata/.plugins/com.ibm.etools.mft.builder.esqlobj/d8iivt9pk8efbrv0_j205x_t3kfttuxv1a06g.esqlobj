CREATE COMPUTE MODULE log4j_mf_Compute
    CREATE FUNCTION Main() RETURNS BOOLEAN
    BEGIN
        -- Initialize the log configuration
        CALL initLog4j(exvar) INTO var;
        
        -- Copy the entire message
        CALL CopyEntireMessage();
        
        RETURN TRUE;
    END;

    CREATE PROCEDURE CopyMessageHeaders() 
    BEGIN
        DECLARE I INTEGER 1;
        DECLARE J INTEGER;
        SET J = CARDINALITY(InputRoot.*[]);
        
        -- Corrected loop condition from I < J to I <= J to ensure all headers are copied
        WHILE I <= J DO 
            SET OutputRoot.*[I] = InputRoot.*[I];
            SET I = I + 1;
        END WHILE;
    END;

    CREATE PROCEDURE CopyEntireMessage() 
    BEGIN
        DECLARE input_request, output_response CHARACTER;

        -- Copy data from XMLNSC to JSON
        SET OutputRoot.JSON.Data.Result = InputRoot.XMLNSC.root;

        -- Convert InputRoot and OutputRoot to CHARACTER from BLOB
        SET input_request = CAST(ASBITSTREAM(InputRoot.XMLNSC CCSID InputRoot.Properties.CodedCharSetId) AS CHARACTER CCSID InputRoot.Properties.CodedCharSetId);
        SET output_response = CAST(ASBITSTREAM(OutputRoot.JSON CCSID InputRoot.Properties.CodedCharSetId) AS CHARACTER CCSID InputRoot.Properties.CodedCharSetId);
        
        -- Log input request and output response
        CALL logwrite(MessageFlowLabel, 'RakeshLogger1', 'INFO', 'Application_data: ' || input_request) INTO var;
        CALL logwrite(MessageFlowLabel, 'RakeshLogger1', 'INFO', 'Application_data: ' || output_response) INTO var;
    END;
END MODULE;