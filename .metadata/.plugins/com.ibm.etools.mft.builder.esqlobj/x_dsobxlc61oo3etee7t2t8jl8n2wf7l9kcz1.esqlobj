
	/*
	 * ReadEvents populates the NewEvents structure with event data read from the event table.
	 * ReadEvents is called after all current events have been dispatched.
	 * ReadEvents is called on a new transaction that is a separate transaction from the message
	 * flow, and that runs before the message flow transaction.
	 *
	 * After ReadEvents completes:
	 * - the current transaction is committed to ensure that any database locks obtained during
	 *   ReadEvents are released.
	 * - All events in NewEvents are moved to Ready state.  This means that they are ready to be
	 *   dispatched.
	 *
	 * Parameters:
	 * IN NewEvents REFERENCE.  This is a reference to a ROW. ReadEvents must create children of
	 *                          this ROW for each event that is being processed.
	 *                          Each child must include a 'Usr' field and a 'Key' field, with the
	 *                          field names being case sensitive.
	 */
	 CREATE PROCEDURE ReadEvents( IN NewEvents REFERENCE )
	 BEGIN
		DECLARE EXIT HANDLER FOR SQLSTATE LIKE 'D%'
		BEGIN
			RESIGNAL; /* pass the error back to the node */

			/* To choose to handle Database errors yourself, delete the RESIGNAL statement above
			 * and uncomment the following procedure call */
--			CALL HandleDatabaseError('ReadEvents');
		END;

		/*
		 * Here you select all unprocessed events from the event store.
		 * You only read the events here; you delete them in EndEvent.
		 * In general, it is not good practice to delete or update the events here because this
		 * transaction will be committed even before the BuildMessage procedure is called.
		 * Under certain circumstances, for example, if you do not need assured delivery of the
		 * events, it is acceptable to update or delete the events here. This means that
		 * the deletion or update is committed before the message flow processes the in-memory
		 * copies of these events. If the broker, execution group, or message flow is stopped
		 * or redeployed in the meantime, the in-memory copy is lost, and the events are never
		 * processed by the flow.
		 *
		 * NOTE: You do not need to filter out events that are currently dispatched here.
		 *       The framework ensures that events are not duplicated by comparing the 'Key' field
		 *       to the 'Key' field of dispatched events.
		 */

		--@!{ ******************** "ReadEvents" autogenerated code (0) ********************
		-- If you want the tool to generate code for you, do not delete the comments that denote the start or end
		-- of autogenerated code. Any changes that you make between the start and end comments is lost if you
		-- generate code again.
		/* For example*/
--		SET NewEvents.Event[] = SELECT <MyEventTableName>.* AS Usr,
--									<MyEventTableName>.<MyEventTablePrimaryKey> AS Key
--									FROM Database.<MySchemaName>.<MyEventTableName>;

		/*
		 * Optionally, if your event table has a column to store state (events are not removed from
		 * the table after processing), use the WHERE clause to filter the events.
		 */
--		SET NewEvents.Event[] = SELECT <MyEventTableName>.* AS Usr,
--									<MyEventTableName>.<MyEventTablePrimaryKey> AS Key
--									FROM Database.<MySchemaName>.<MyEventTableName>
--									WHERE <MyEventTableName>.<MyStatusColumnName> = <MyNewEventStatusValue>;
		/*
		 * If you need to use the PASSTHRU function, ensure that the case of the 'Usr' and 'Key'
		 * field names are preserved by wrapping them in double quotes.
		 */
--		SET NewEvents.Event[] = PASSTHRU('SELECT <MyEventTableName>.* AS "Usr",
--									<MyEventTableName>.<MyEventTablePrimaryKey> AS "Key"
--									FROM <MySchemaName>.<MyEventTableName>');
		--@!} ******************** "ReadEvents" autogenerated code (0) ********************
	END;


	/*
	 * BuildMessage builds the message to be propagated to the flow.
	 * Typically, you use the event data for the current dispatched event to look up data in
	 * the application table, and copy that data into the message.
	 * BuildMessage is called while some events are in the Ready state.
	 * BuildMessage is called as part of the message flow transaction. This transaction also
	 * involves EndEvent.
	 *
	 * After BuildMessage returns, the message is propagated to the message flow.
	 *
	 * Parameters:
	 * IN DispatchedEvent REFERENCE.  A Reference to a ROW containing the event data for the
	 *                                current dispatched event. This is a copy of one of the 
	 *                                events added to NewEvents by ReadEvents procedure.
	 */
	CREATE PROCEDURE BuildMessage(IN DispatchedEvent REFERENCE)
	BEGIN
		DECLARE EXIT HANDLER FOR SQLSTATE LIKE 'D%'
		BEGIN
			RESIGNAL; /* pass the error back to the node */

			/* To choose to handle Database errors yourself, delete the RESIGNAL statement above
			 * and uncomment the following procedure call */
--			CALL HandleDatabaseError('BuildMessage');
		END;
		/* Here you use the event data in the local environment to retrieve the application data. */

		--@!{ ******************** "BuildMessage" autogenerated code (0) ********************
		-- If you want the tool to generate code for you, do not delete the comments that denote the start or end
		-- of autogenerated code. Any changes that you make between the start and end comments is lost if you
		-- generate code again.
		/* For example */
--		SET Root.DataObject.<MyApplicationTableName>[] =
--				SELECT <MyApplicationTableName>.*
--					FROM Database.<MySchemaName>.<MyApplicationTableName>
--					WHERE <MyApplicationTableName>.<MyApplicationTablePrimaryKey> = DispatchedEvent.Usr.<MyEventTableForeignKey>;
		--@!} ******************** "BuildMessage" autogenerated code (0) ********************
		RETURN;
	END;


	/*
	 * EndEvent updates the event table to record the event as processed.
	 * EndEvent is called after the message flow has processed the event.
	 * EndEvent is called as part of the message flow transaction.  This transaction also involves
	 * BuildMessage. The transaction will be committed when this procedure ends.
	 *
	 * Parameters:
	 * IN DispatchedEvent REFERENCE.  A Reference to a ROW containing the event data for the current
	 *                                dispatched event. This is a copy of one of the events added to
	 *                                NewEvents by ReadEvents procedure.
	 */
	CREATE PROCEDURE EndEvent(IN DispatchedEvent REFERENCE)
	BEGIN
		DECLARE EXIT HANDLER FOR SQLSTATE LIKE 'D%'
		BEGIN
			RESIGNAL; /* pass the error back to the node */

			/* To choose to handle Database errors yourself, delete the RESIGNAL statement above
			 * and uncomment the following procedure call */
--			CALL HandleDatabaseError('EndEvent');

		END;
		/* Here you update the event table to ensure that this event is not processed again. */

		--@!{ ******************** "EndEvent" autogenerated code (0) ********************
		-- If you want the tool to generate code for you, do not delete the comments that denote the start or end
		-- of autogenerated code. Any changes that you make between the start and end comments is lost if you
		-- generate code again.
		/* For example */
--		DELETE FROM  Database.<MySchemaName>.<MyEventTableName>
--				WHERE <MyEventTableName>.<MyEventTablePrimaryKey> = DispatchedEvent.Usr.<MyEventTablePrimaryKey>;

		/* Optionally, if your event table has a column to store state, you can update the events here. */
--		UPDATE Database.<MySchemaName>.<MyEventTableName>
--				SET <MyStatusColumnName> = <MyProcessedEventStatusValue>
--				WHERE <MyEventTableName>.<MyEventTablePrimaryKey> = DispatchedEvent.Usr.<MyEventTablePrimaryKey>;
		--@!} ******************** "EndEvent" autogenerated code (0) ********************
		RETURN;
	END;


	CREATE PROCEDURE HandleDatabaseError( IN FunctionName CHARACTER )
	BEGIN
		/* Throw a different exception; this could be changed. */
		DECLARE message CHARACTER 'Exception occured calling Database Input Node function: ' || FunctionName;
		THROW USER EXCEPTION VALUES( SQLCODE, SQLSTATE, SQLNATIVEERROR, SQLERRORTEXT, message );
	END;

