CREATE COMPUTE MODULE BD_TASK_SH_MSG_FLOW_Compute
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		-- CALL CopyMessageHeaders();
		CALL CopyEntireMessage();

		RETURN false;
	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

	CREATE PROCEDURE CopyEntireMessage() BEGIN
		-- --SET OutputRoot = InputRoot;
		DECLARE ENVAR REFERENCE TO Environment.Variables;

		SET ENVAR.request_id = InputRoot.JSON.Data.Request_Id;

		CALL Payload_Logging('REQUEST',ASBITSTREAM(InputRoot.JSON.Data));

		set OutputRoot.XMLNSC.Root.data = InputRoot.JSON.Data;

		set ENVAR.out = OutputRoot;        
	
 
	


		CALL Payload_Logging('RESPONSE', ASBITSTREAM(OutputRoot));

		SET OutputRoot.XMLNSC.root = ENVAR.out;

		propagate to TERMINAL 'out1';


	END;
	CREATE PROCEDURE Payload_Logging (IN PAYLOAD_TYPE CHARACTER, IN PAYLOAD BLOB )
	BEGIN

		SET OutputRoot=NULL;

		DECLARE ENVAR REFERENCE TO Environment.Variables;		
		--SET ENVAR.request_id = InputRoot.JSON.Data.RequestId;
		--SET OutputRoot.MQMD.Format = MQFMT_RF_HEADER_2;		


		SET OutputRoot.MQRFH2.usr.requestid = ENVAR.request_id;

		SET OutputRoot.MQRFH2.usr.Payload_Type = PAYLOAD_TYPE;
		set OutputRoot.XMLNSC.payload = PAYLOAD;

		propagate to TERMINAL 'out';		


		SET OutputRoot=NULL;

	END;
END MODULE;